@page "/chatroom"
@inject NavigationManager navigationManager
@inject UserService userService

@using Microsoft.AspNetCore.SignalR.Client;

<h1>Blazor SignalR Chat Sample</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="_username" />
    <button type="button" @onclick="Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    @if (!string.IsNullOrWhiteSpace(_message))
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="DisconnectAsync">Disconnect</button>
    </div>

    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="Enter your message" @bind="_newMessage"></textarea>
        <select class="form-select" @bind="_to">
            <option value="All">All</option>
            @foreach (var user in userService.GetAll())
            {
                if (user.Username != _username)
                {
                    <option value="@user.Username">@user.Username</option>
                }
            }
        </select>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>

    </div>
}

@code {
    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // recipient of private message
    private string _to = "All";

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    private async Task Chat()
    {
        // check if username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;
            _hubUrl = baseUrl.TrimEnd('/') + BlazorChatSampleHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);
            _hubConnection.On<string, string>("Private", PrivateMessage);

            userService.Add(_hubConnection.ConnectionId, _username);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {_username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);
        _messages.Add(new Message(name, message, isMine));
        InvokeAsync(StateHasChanged);
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");
            userService.RemoveByName(_username);
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();
            _hubConnection = null;
            _isChatting = false;
        }
    }

    private void PrivateMessage(string name, string message)
    {
        _messages.Add(new Message(name, $"[Private]: {message}", false));
        InvokeAsync(StateHasChanged);
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            if (_to == "All")
            {
                await _hubConnection.SendAsync("Broadcast", _username, message);
            }
            else
            {
                var connectionId = userService.GetConnectioIdByName(_to);
                if (connectionId != null)
                {
                    await _hubConnection.SendAsync("Private", _username, _to, message);
                }
            }

            _newMessage = string.Empty;
        }
    }


    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}
